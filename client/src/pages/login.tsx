import Head from 'next/head'
import { Inter } from 'next/font/google'
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'
import {Alert, AppBar, Box, Button, Grid, TextField, Toolbar, Typography} from "@mui/material";
import {useRouter} from "next/router";
import {Fragment, useState} from "react";
import {validatePassword} from "@/utils/passwordValidater";
import {validateEmail} from "@/utils/emailValidater";
import Link from "next/link";
import {User} from "@/types/types";
import {useRecoilState} from "recoil";
import {userState} from "@/state/userState";
import {pagesPath} from "@/utils/$path";

const inter = Inter({ subsets: ['latin'] })

type Repo = {
  name: string
  stargazers_count: number
}

const boxWidth = 360;

type State = {
  loginFailed: boolean;
  isLoggedIn: boolean;
  email: string;
  password: string;
  successRegisterNewPasswordMessages: string[];
  errorMessages: string[];
}

export default function Login() {
  const [state, setState] = useState<State>({
    loginFailed: false,
    isLoggedIn: false,
    email: "",
    password: "",
    successRegisterNewPasswordMessages: [],
    errorMessages: [],
  });
  const [, setUser] = useRecoilState(userState);
  const {
    loginFailed,
    isLoggedIn,
    password,
    email,
    successRegisterNewPasswordMessages,
    errorMessages,
  } = state;
  const router = useRouter();

  const handleOnClickLogin = async () => {
    const response = await fetch("http://localhost:3000/login", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email,
        password,
      }),
    });
    if (response.status === 200) {
      const user: User = await response.json();
      setUser(user);
      await router.push(pagesPath.my_page.$url());
    } else {
      const data = await response.json();
      setState({
        ...state,
        loginFailed: true,
        errorMessages: data.messages
      });
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div>
        <main>
          <AppBar position="static">
            <Toolbar>
              <Typography variant="h4" color="inherit" style={{flexGrow: 1}}/>
              <Link href="/">
                アカウント作成
              </Link>
            </Toolbar>
          </AppBar>
          <div>
            <Grid
              container
              spacing={2}
              direction="column"
              style={{
                position: "absolute",
                top: "calc(50% - 140px)",
                left: "calc(50% - 150px)",
                width: 300,
                padding: 20,
                border: "solid 1px",
                borderRadius: 6,
                marginTop: 40,
                backgroundColor: "white",
              }}
            >
              <Grid item xs={12}>
                  {successRegisterNewPasswordMessages.length > 0 && (<Alert severity="success">
                    {successRegisterNewPasswordMessages.map((message) => (
                      <Fragment key={message}>{message}<br /></Fragment>
                    ))}
                  </Alert>)}
                <TextField
                  id="standard-mail"
                  label="メールアドレス"
                  fullWidth
                  value={email}
                  onChange={(e) => {
                    setState({ ...state,
                      email: e.target.value,
                      errorMessages: [],
                    });
                  }}
                />
                {errorMessages.length > 0 && <Alert severity="error">
                  {
                    errorMessages.map((m) => (
                      <>
                        {m}
                        <br/>
                      </>
                    ))
                  }
                </Alert>
                }
              </Grid>

              <Grid item xs={12}>
                <TextField
                  id="standard-password-input"
                  label="Password"
                  type="password"
                  autoComplete="current-password"
                  fullWidth
                  value={password}
                  onChange={(e) => setState({ ...state, password: e.target.value })}
                />
              </Grid>

              <Grid item xs={12}>
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  onClick={async () => {
                    if (!validateEmail(email)) {
                      setState({ ...state, errorMessages: ["メールアドレスの形式が不正です。"] });
                      return;
                    }
                    await handleOnClickLogin();
                  }}
                >
                  ログイン
                </Button>
                {loginFailed && <Alert severity="error">
                  ログインに失敗しました。
                </Alert>}
              </Grid>

              <Grid item xs={12}>
                <Link href={""}>
                  パスワードを忘れた方はこちら
                </Link>
              </Grid>
            </Grid>
          </div>
        </main>
      </div>
    </>
  )
}
