import type {GetServerSideProps, InferGetServerSidePropsType} from "next";
import {useState} from "react";
import {useRouter} from "next/router";
import useSWRMutation from "swr/mutation";
import Head from "next/head";
import {
  Box, Fab,
  Grid,
  TextField,
} from "@mui/material";
import LoadingOverlay from "@/components/LoadingOverlay";
import {pagesPath} from "@/utils/$path";
import {Add, Save,} from "@mui/icons-material";
import {DatePicker} from "@mui/x-date-pickers";
import {NewStaff, Staff} from "@/openapi/openapi-generated";

const fetcher = async (url: string, { arg }: { arg: NewStaff }) =>
  await fetch(url, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ staff: arg }),
  });

export const getServerSideProps = (async (context) => {
  const { sid } = context.query;
  const res = await fetch(`http://localhost:8080/api/staffs/${sid}/`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json',
    },
  })
  const staff = await res.json();

  return { props: { staff } }
}) satisfies GetServerSideProps<{ staff: Staff }>

export default function Edit({
                               staff,
                             }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [staffUnderEdit, setStaffUnderEdit] = useState<Staff>({
    id: staff.id,
    lastName: staff.lastName,
    firstName: staff.firstName,
    birthDate: new Date(staff.birthDate),
  });

  const router = useRouter();
  const { trigger, isMutating } = useSWRMutation(`http://localhost:8080/api/staffs/${staff.id}/`, fetcher);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div>
        <main>
          <Box>
            {isMutating && <LoadingOverlay />}
            <Grid
              container
              spacing={2}
              style={{
                height: "100%",
                width: "100%",
                marginTop: 40,
              }}
            >
              <Grid item xs={12}>
                エラーメッセージ
              </Grid>

              <Grid item xs={12}>
                <TextField
                  fullWidth
                  required
                  label="姓"
                  value={staffUnderEdit.lastName}
                  onChange={(e) =>
                    setStaffUnderEdit({ ...staffUnderEdit, lastName: e.target.value })
                  }
                />
              </Grid>

              <Grid item xs={12}>
                <TextField
                  fullWidth
                  required
                  label="名"
                  value={staffUnderEdit.firstName}
                  onChange={(e) =>
                    setStaffUnderEdit({ ...staffUnderEdit, firstName: e.target.value })
                  }
                />
              </Grid>

              <Grid item xs={12}>
                <DatePicker
                  label="生年月日"
                  format="YYYY/MM/DD"
                  value={staffUnderEdit.birthDate}
                  onChange={(date) => {
                    if (date === null) return;

                    setStaffUnderEdit({
                      ...staffUnderEdit,
                      birthDate: date,
                    });
                  }}
                />
              </Grid>

            </Grid>
            <Fab
              variant="extended"
              color="primary"
              style={{ left: "50%", bottom: "2%", position: "fixed" }}
              disabled={isMutating}
              onClick={async () => {
                await trigger(staffUnderEdit);
                await router.push(pagesPath.staff.$url());
              }}
            >
              <Save />
              保存
            </Fab>
          </Box>
        </main>
      </div>
    </>
  )
}
