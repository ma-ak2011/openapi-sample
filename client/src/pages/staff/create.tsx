import {useState} from "react";
import {useRouter} from "next/router";
import useSWRMutation from "swr/mutation";
import Head from "next/head";
import {
  Box, Container, Fab,
  Grid,
  TextField,
} from "@mui/material";
import LoadingOverlay from "@/components/LoadingOverlay";
import {pagesPath} from "@/utils/$path";
import {Save} from "@mui/icons-material";
import {DatePicker} from "@mui/x-date-pickers";
import {NewStaff, Staff} from "@/openapi/openapi-generated";

const fetcher = async (url: string, { arg }: { arg: NewStaff }) =>
  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ staff: arg }),
  });

export default function Create() {
  const [staff, setStaff] = useState<Staff>({
    id: 0,
    lastName: "",
    firstName: "",
    birthDate: new Date(),
  });

  const router = useRouter();
  const { trigger, isMutating } = useSWRMutation("http://localhost:8080/api/staffs/", fetcher);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <main>
        <Container>
          <Box sx={(_theme) => ({
            maxWidth: "105ch",
            width: "100%",
          })}>
            {isMutating && <LoadingOverlay />}
            <Grid
              container
              spacing={2}
              style={{
                height: "100%",
                width: "100%",
                marginTop: 40,
              }}
            >
              <Grid item xs={12}>
                エラーメッセージ
              </Grid>

              <Grid item xs={12}>
                <TextField
                  fullWidth
                  required
                  label="姓"
                  value={staff.lastName}
                  onChange={(e) =>
                    setStaff({ ...staff, lastName: e.target.value })
                  }
                />
              </Grid>

              <Grid item xs={12}>
                <TextField
                  fullWidth
                  required
                  label="名"
                  value={staff.firstName}
                  onChange={(e) =>
                    setStaff({ ...staff, firstName: e.target.value })
                  }
                />
              </Grid>

              <Grid item xs={12}>
                <DatePicker
                  label="生年月日"
                  format="YYYY/MM/DD"
                  value={staff.birthDate}
                  onChange={(date) => {
                    if (date === null) return;

                    setStaff({
                      ...staff,
                      birthDate: date,
                    });
                  }}
                />
              </Grid>

            </Grid>
            <Fab
              variant="extended"
              color="primary"
              style={{ left: "50%", bottom: "2%", position: "fixed" }}
              disabled={isMutating}
              onClick={async () => {
                await trigger(staff);
                await router.push(pagesPath.staff.$url());
              }}
            >
              <Save />
              保存
            </Fab>
          </Box>
        </Container>
      </main>
    </>
  )
}
