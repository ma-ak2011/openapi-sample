import Head from 'next/head'
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'
import {
  Box, Button, Container, Fab, Grid, IconButton, Paper, Table,
  TableBody,
  TableCell, TableContainer, TableHead, TableRow, TableSortLabel, TextField, Toolbar, Tooltip, Typography
} from "@mui/material";
import api from "@/openapi/aspida/api/$api";
import {Staff} from "@/openapi/aspida/@types";
import { useState } from 'react';
import {Add, DeleteForever, Edit } from '@mui/icons-material';
import {ConfirmDialog} from "@/components/dialog/ConfirmDialog";
import {pagesPath} from "@/utils/$path";
import { useRouter } from 'next/router';
import aspFetch from "@aspida/fetch";
import useSWRMutation from 'swr/mutation';
import {Fetcher} from "swr";
import LoadingOverlay from "@/components/LoadingOverlay";

export const getServerSideProps = (async () => {
  const res = await api(aspFetch(fetch)).staffs.get()
  const staffs = res.body
  return { props: { staffs } }
}) satisfies GetServerSideProps<{ staffs: Staff[] }>

const fetcher = async (url: string, { arg }: { arg: number }) =>
  await fetch(`${url}${arg}/`, {
    method: 'DELETE',
  });

export default function Staffs({
                                 staffs,
                               }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [viewState, setViewState] = useState<{
    filterState: { staffCodes: string[]; storeCodes: string[] };
    sortState: {
      column: keyof Staff;
      direction: "asc" | "desc";
    };
    confirmDeleteId: number | null;
  }>({
    filterState: {
      staffCodes: [],
      storeCodes: [],
    },
    sortState: {
      column: "firstName",
      direction: "asc",
    },
    confirmDeleteId: null,
  });

  const router = useRouter();
  const { trigger, isMutating } = useSWRMutation("http://localhost:8080/api/staffs/", fetcher);

  const { confirmDeleteId, sortState } = viewState;
  const { direction, column } = sortState;

  const sortedStaffs = staffs.sort((s1, s2) => {
    const a = viewState.sortState.direction === "asc" ? s1 : s2;
    const b = viewState.sortState.direction === "asc" ? s2 : s1;

    if (typeof a[column] === "string" && typeof b[column] === "string")
      return a[column].localeCompare(
        b[column],
        "ja"
      );

    return 0;
  });

  const deleteTarget =
    confirmDeleteId === null
      ? undefined
      : staffs.find((staff) => staff.id === confirmDeleteId);

  return (
    <>
      {deleteTarget !== undefined && (
        <ConfirmDialog
          title="確認"
          content={
            <span style={{ whiteSpace: "pre-wrap" }}>
                  以下のスタッフを削除します。
                  <br />
                  削除したスタッフのスケジュールも削除されます。
                  <br />
                  よろしいですか？
                  <br />
                  ※スタッフが退職する場合は退職ボタンから退職処理を行ってください。
                  <br />
                  氏名：
              {`${deleteTarget.lastName} ${deleteTarget.firstName}`}
                </span>
          }
          cancelButtonText="キャンセル"
          okButtonText="OK"
          open
          onClickOK={async () => {
            await trigger(deleteTarget.id);
            return setViewState({ ...viewState, confirmDeleteId: null });
          }}
          onClickCancel={() => setViewState({ ...viewState, confirmDeleteId: null })}
        />
      )}
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div>
        <main>
          <Container>
          <Box  sx={(_theme) => ({
            maxWidth: "105ch",
            width: "100%",
          })}>
            {isMutating && <LoadingOverlay />}
            <Paper>
              <Toolbar>
                <Grid container justifyContent="space-between">
                  <Grid item>
                    <Typography variant="h6">スタッフ一覧</Typography>
                  </Grid>
                  <Grid item />
                </Grid>
              </Toolbar>
              <TableContainer>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell align="left" sortDirection={direction}>
                        <TableSortLabel
                          active={column === "lastName"}
                          direction={direction}
                          onClick={() =>
                            setViewState({
                              ...viewState,
                              sortState: {
                                column: "lastName",
                                direction:
                                  column === "lastName" && direction === "asc"
                                    ? "desc"
                                    : "asc",
                              },
                            })
                          }
                        >
                          性
                        </TableSortLabel>
                      </TableCell>
                      <TableCell align="left" sortDirection={direction}>
                        <TableSortLabel
                          active={column === "firstName"}
                          direction={direction}
                          onClick={() =>
                            setViewState({
                              ...viewState,
                              sortState: {
                                column: "firstName",
                                direction:
                                  column === "firstName" && direction === "asc"
                                    ? "desc"
                                    : "asc",
                              },
                            })
                          }
                        >
                          名
                        </TableSortLabel>
                      </TableCell>
                      <TableCell />
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {sortedStaffs.map((s) => {
                      return (
                        <TableRow
                          hover
                          style={{ opacity: 1, margin: 4 }}
                          key={s.id}
                        >
                          <TableCell align="left">
                            {s.lastName}
                          </TableCell>
                          <TableCell align="left">
                            {s.firstName}
                          </TableCell>
                          <TableCell align="right">
                            <Tooltip title="編集" placement="top" arrow>
                              <IconButton
                                color="primary"
                                onClick={(_e) => router.push(pagesPath.staff._sid(s.id).edit.$url())}
                              >
                                <Edit />
                              </IconButton>
                            </Tooltip>
                            <Tooltip title="削除" placement="top" arrow>
                              <IconButton
                                color="default"
                                onClick={(_e) =>
                                  setViewState({
                                    ...viewState,
                                    confirmDeleteId: s.id,
                                  })
                                }
                              >
                                <DeleteForever />
                              </IconButton>
                            </Tooltip>
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </TableContainer>
            </Paper>
            <Fab
              variant="extended"
              color="primary"
              style={{  left: "50%", bottom: "2%", position: "fixed" }}
              disabled={isMutating}
              onClick={() => router.push(pagesPath.staff.create.$url())}
            >
              <Add />
              新規作成
            </Fab>
          </Box>
          </Container>
        </main>
      </div>
    </>
  )
}
