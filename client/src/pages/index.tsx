import Head from 'next/head'
import { Inter } from 'next/font/google'
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'
import {Alert, Box, Button, Grid, TextField, Typography} from "@mui/material";
import {useRouter} from "next/router";
import {useState} from "react";
import {validatePassword} from "@/utils/passwordValidater";
import {pagesPath, staticPath} from "@/utils/$path";

const inter = Inter({ subsets: ['latin'] })

type Repo = {
  name: string
  stargazers_count: number
}

const boxWidth = 360;

type State = {
  email: string;
  password: string;
  passwordConfirm: string;
  errorEmailMessage: string[];
  errorPasswordMessage: string[];
  errorPasswordConfirmMessage: string[];
  errorServerMessage: string[];
  passwordFocused: boolean;
  passwordConfirmFocused: boolean;
};

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Home({
                               repo,
                             }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const [state, setState] = useState<State>({
    email: "",
    password: "",
    passwordConfirm: "",
    errorEmailMessage: [],
    errorPasswordMessage: [],
    errorPasswordConfirmMessage: [],
    errorServerMessage: [],
    passwordFocused: false,
    passwordConfirmFocused: false,
  });
  const { email, password, passwordConfirm, errorEmailMessage, errorPasswordMessage, errorPasswordConfirmMessage, errorServerMessage, passwordFocused, passwordConfirmFocused } = state;
  const router = useRouter();
  const handleOnBlurPassword = () => {
    let messages = [];
    if (!validatePassword(password)) {
      messages.push("パスワードの形式が不正です。");
    }
    if (password !== passwordConfirm) {
      messages.push("パスワードが一致しません。");
    }
    setState({ ...state, errorPasswordMessage: messages });
  };

  const handleClickCreateAccount = async () => {
    const response = await fetch("http://localhost:3000/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email,
        password,
      }),
    });
    if (response.status === 200) {
      await router.push("/login");
    } else {
      const data = await response.json();
      setState({
        ...state,
        errorServerMessage: data.messages,
      });
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <div style={{
        backgroundImage: `url(${staticPath.leassell_png})`,
        backgroundSize: "cover",
        backgroundPosition: "100% 50%",
        width: "100vw",
        height: "100vh",
        position: "relative",
      }}>
        <main style={{position: "relative", height: "100%"}}>
          <div style={
            {
              position: "absolute",
              right: 0,
              top: 0,
              padding: 16,
            }
          }>
            <Button
              sx={(theme) => ({
                '& .MuiButton-root': {
                  color: theme.palette.primary.contrastText,
                },
              })}
              onClick={() => router.push(pagesPath.login.$url())}
            >
              ログイン
            </Button>
            <Button
              sx={(theme) => ({
                '& .MuiButton-root': {
                  color: theme.palette.primary.contrastText,
                },
              })}
              onClick={() => router.push(pagesPath.staff.$url())}
            >
              スタッフページ
            </Button>
          </div>
          <Box sx={(theme) => ({
            position: "absolute",
            transform: "translate(-50%,-50%)",
            borderRadius: 6,
            backgroundColor: "white",
            padding: 2,
            [theme.breakpoints.up("lg")]: {
              top: "56%",
              left: "16%",
              maxWidth: boxWidth,
              height: boxWidth * 1.618,
            },
            [theme.breakpoints.down("lg")]: {
              top: "50%",
              left: "50%",
              maxWidth: 300,
              height: 300 * 1.618,
            },
          })}>
            <Grid
              container
              direction="column"
              justifyContent="space-evenly"
              style={{height: "100%"}}
            >
              <Grid item>
                <Typography variant="h5" color="textPrimary">
                  アカウント作成
                </Typography>
              </Grid>

              <Grid item>
                <TextField
                  id="standard-mail"
                  label="メールアドレス"
                  margin="normal"
                  fullWidth
                  value={email}
                  onChange={(e) => setState({...state, email: e.target.value})}
                  onBlur={() => handleOnBlurPassword()}
                />

                {errorEmailMessage.length > 0 && <Alert severity="error">
                  {
                    errorEmailMessage.map((m) => (
                      <>
                        {m}
                        <br/>
                      </>
                    ))
                  }
                </Alert>}
              </Grid>

              <Grid item>
                <TextField
                  id="standard-password-input"
                  label="パスワード"
                  type="password"
                  fullWidth
                  value={password}
                  onFocus={() => setState({...state, passwordFocused: true})}
                  onChange={(e) => setState({...state, password: e.target.value})}
                  onBlur={() => handleOnBlurPassword()}
                />
                <Typography color="textSecondary">
                  半角英数字8〜12文字で入力してください。
                </Typography>
                {errorPasswordMessage.length > 0 &&
                  <Alert severity="error">
                    {
                      errorPasswordMessage.map((m) => (
                        <>
                          {m}
                          <br/>
                        </>
                      ))
                    }
                  </Alert>
                }
              </Grid>

              <Grid item>
                <TextField
                  id="standard-password-confirm-input"
                  label="パスワード確認"
                  type="password"
                  fullWidth
                  value={passwordConfirm}
                  onFocus={() => setState({...state, passwordConfirmFocused: true})}
                  onChange={(e) => setState({...state, passwordConfirm: e.target.value})}
                  onBlur={() => handleOnBlurPassword()}
                />
                {errorPasswordConfirmMessage.length > 0 &&
                  <Alert severity="error">
                    {
                      errorPasswordConfirmMessage.map((m) => (
                        <>
                          {m}
                          <br/>
                        </>
                      ))
                    }
                  </Alert>
                }
              </Grid>
              <Grid item>
                {errorServerMessage.length > 0 &&
                  <Alert severity="error">
                    {
                      errorServerMessage.map((m) => (
                        <>
                          {m}
                          <br/>
                        </>
                      ))
                    }
                  </Alert>}
              </Grid>
              <Grid item>
                <Button
                  variant="contained"
                  color="primary"
                  fullWidth
                  onClick={(_e) =>
                    handleClickCreateAccount()
                  }
                >
                  アカウント作成
                </Button>
              </Grid>
            </Grid>
          </Box>
        </main>
      </div>
    </>
  )
}
