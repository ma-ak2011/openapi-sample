/* tslint:disable */
/* eslint-disable */
/**
 * Implementing Server Side Kotlin
 * Sample API of Hands On Server Side Kotlin
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BigInteger,
  NewStaffRequest,
  Staff,
  UpdateStaffRequest,
} from '../models/index';
import {
    BigIntegerFromJSON,
    BigIntegerToJSON,
    NewStaffRequestFromJSON,
    NewStaffRequestToJSON,
    StaffFromJSON,
    StaffToJSON,
    UpdateStaffRequestFromJSON,
    UpdateStaffRequestToJSON,
} from '../models/index';

export interface DeleteRequest {
    id: BigInteger;
}

export interface CreateRequest {
    newStaffRequest: NewStaffRequest;
}

export interface ShowRequest {
    id: BigInteger;
}

export interface UpdateRequest {
    id: UpdateStaffRequest;
}

/**
 * 
 */
export class StaffControllerApi extends runtime.BaseAPI {

    /**
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/staffs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters['newStaffRequest'] == null) {
            throw new runtime.RequiredError(
                'newStaffRequest',
                'Required parameter "newStaffRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/staffs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewStaffRequestToJSON(requestParameters['newStaffRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async indexRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Staff>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/staffs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaffFromJSON));
    }

    /**
     */
    async index(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Staff>> {
        const response = await this.indexRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async showRaw(requestParameters: ShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling show().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/staffs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     */
    async show(requestParameters: ShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.showRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Staff>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/staffs/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaffFromJSON(jsonValue));
    }

    /**
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Staff> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
