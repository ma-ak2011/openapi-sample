/* tslint:disable */
/* eslint-disable */
/**
 * Implementing Server Side Kotlin
 * Sample API of Hands On Server Side Kotlin
 *
 * The version of the OpenAPI document: 0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface NewStaff
 */
export interface NewStaff {
    /**
     * 名
     * @type {string}
     * @memberof NewStaff
     */
    'firstName': string;
    /**
     * 性
     * @type {string}
     * @memberof NewStaff
     */
    'lastName': string;
    /**
     * 生年月日
     * @type {string}
     * @memberof NewStaff
     */
    'birthDate': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof NewStaff
     */
    'email': string;
}
/**
 * 新規作成するスタッフ
 * @export
 * @interface NewStaffRequest
 */
export interface NewStaffRequest {
    /**
     * 
     * @type {NewStaff}
     * @memberof NewStaffRequest
     */
    'staff': NewStaff;
}
/**
 * 
 * @export
 * @interface NullableStaff
 */
export interface NullableStaff {
    /**
     * 
     * @type {StaffForClient}
     * @memberof NullableStaff
     */
    'staff'?: StaffForClient | null;
}
/**
 * 
 * @export
 * @interface StaffForClient
 */
export interface StaffForClient {
    /**
     * ID
     * @type {string}
     * @memberof StaffForClient
     */
    'id': string;
    /**
     * 名
     * @type {string}
     * @memberof StaffForClient
     */
    'firstName': string;
    /**
     * 性
     * @type {string}
     * @memberof StaffForClient
     */
    'lastName': string;
    /**
     * 生年月日
     * @type {string}
     * @memberof StaffForClient
     */
    'birthDate': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof StaffForClient
     */
    'email': string;
    /**
     * 契約開始日
     * @type {string}
     * @memberof StaffForClient
     */
    'contractStartDate'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof StaffForClient
     */
    'contractEndDate'?: string;
}
/**
 * 
 * @export
 * @interface UpdateStaff
 */
export interface UpdateStaff {
    /**
     * ID
     * @type {string}
     * @memberof UpdateStaff
     */
    'id': string;
    /**
     * 名
     * @type {string}
     * @memberof UpdateStaff
     */
    'firstName': string;
    /**
     * 性
     * @type {string}
     * @memberof UpdateStaff
     */
    'lastName': string;
    /**
     * 生年月日
     * @type {string}
     * @memberof UpdateStaff
     */
    'birthDate': string;
    /**
     * メールアドレス
     * @type {string}
     * @memberof UpdateStaff
     */
    'email': string;
    /**
     * 契約開始日
     * @type {string}
     * @memberof UpdateStaff
     */
    'contractStartDate'?: string;
    /**
     * 契約終了日
     * @type {string}
     * @memberof UpdateStaff
     */
    'contractEndDate'?: string;
}
/**
 * 
 * @export
 * @interface UpdateStaffRequest
 */
export interface UpdateStaffRequest {
    /**
     * 
     * @type {UpdateStaff}
     * @memberof UpdateStaffRequest
     */
    'staff': UpdateStaff;
}

/**
 * StaffControllerApi - axios parameter creator
 * @export
 */
export const StaffControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id StaffのId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('_delete', 'id', id)
            const localVarPath = `/api/staffs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewStaffRequest} newStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (newStaffRequest: NewStaffRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newStaffRequest' is not null or undefined
            assertParamExists('create', 'newStaffRequest', newStaffRequest)
            const localVarPath = `/api/staffs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newStaffRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/staffs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id StaffのId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('show', 'id', id)
            const localVarPath = `/api/staffs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateStaffRequest} id 更新するスタッフ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: UpdateStaffRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            const localVarPath = `/api/staffs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StaffControllerApi - functional programming interface
 * @export
 */
export const StaffControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StaffControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id StaffのId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffControllerApi._delete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NewStaffRequest} newStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(newStaffRequest: NewStaffRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffForClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(newStaffRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffControllerApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async index(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StaffForClient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffControllerApi.index']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id StaffのId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async show(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NullableStaff>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.show(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffControllerApi.show']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateStaffRequest} id 更新するスタッフ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: UpdateStaffRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffForClient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StaffControllerApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StaffControllerApi - factory interface
 * @export
 */
export const StaffControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StaffControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id StaffのId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(id: string, options?: any): AxiosPromise<object> {
            return localVarFp._delete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {NewStaffRequest} newStaffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(newStaffRequest: NewStaffRequest, options?: any): AxiosPromise<StaffForClient> {
            return localVarFp.create(newStaffRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(options?: any): AxiosPromise<Array<StaffForClient>> {
            return localVarFp.index(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id StaffのId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        show(id: string, options?: any): AxiosPromise<NullableStaff> {
            return localVarFp.show(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpdateStaffRequest} id 更新するスタッフ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: UpdateStaffRequest, options?: any): AxiosPromise<StaffForClient> {
            return localVarFp.update(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StaffControllerApi - object-oriented interface
 * @export
 * @class StaffControllerApi
 * @extends {BaseAPI}
 */
export class StaffControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} id StaffのId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public _delete(id: string, options?: RawAxiosRequestConfig) {
        return StaffControllerApiFp(this.configuration)._delete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {NewStaffRequest} newStaffRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public create(newStaffRequest: NewStaffRequest, options?: RawAxiosRequestConfig) {
        return StaffControllerApiFp(this.configuration).create(newStaffRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public index(options?: RawAxiosRequestConfig) {
        return StaffControllerApiFp(this.configuration).index(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id StaffのId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public show(id: string, options?: RawAxiosRequestConfig) {
        return StaffControllerApiFp(this.configuration).show(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpdateStaffRequest} id 更新するスタッフ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StaffControllerApi
     */
    public update(id: UpdateStaffRequest, options?: RawAxiosRequestConfig) {
        return StaffControllerApiFp(this.configuration).update(id, options).then((request) => request(this.axios, this.basePath));
    }
}



